{"version":3,"sources":["components/hoc/SwitchStatus/index.ts","utils/bem-config.ts","components/hoc/SwitchStatus/SwitchStatus.tsx","app/api.ts","components/MainPage/MainPageSlice.ts","components/MainPage/MainPage.tsx","App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["Status","cn","withNaming","n","e","m","v","SwitchStatus","status","ComponentOnNoStatus","ComponentOnDone","ComponentOnLoading","ComponentOnError","NO_STATUS","DONE","LOADING","ERROR","api","initialState","table","getCharacter","createAsyncThunk","filter","a","axios","get","params","name","response","data","mainPageSlice","createSlice","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","results","rejected","selectMainPage","mainPage","bem","MainPage","idTimeOut","dispatch","useDispatch","useSelector","useEffect","className","type","onChange","event","value","target","length","clearTimeout","setTimeout","map","item","src","image","alt","species","id","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc1a3e4f.chunk.js","sourcesContent":["export { SwitchStatus } from './SwitchStatus';\n\nexport enum Status {\n  NO_STATUS = 'no-status',\n  DONE = 'done',\n  LOADING = 'loading',\n  ERROR = 'error',\n}\n","import { withNaming } from '@bem-react/classname';\n\nexport const cn = withNaming({\n  n: 'i-', e: '__', m: '--', v: '_',\n});\n","import React from 'react';\nimport { Status } from '.';\n\ntype PropsType = {\n  status: Status | string,\n  ComponentOnNoStatus?: React.ReactElement,\n  ComponentOnDone: React.ReactElement,\n  ComponentOnLoading?: React.ReactElement,\n  ComponentOnError?: React.ReactElement,\n}\n\nexport const SwitchStatus: React.FC<PropsType> = ({\n  status, ComponentOnNoStatus, ComponentOnDone, ComponentOnLoading, ComponentOnError,\n}: PropsType) => (\n  <>\n    {status === Status.NO_STATUS && ComponentOnNoStatus}\n    {status === Status.DONE && ComponentOnDone}\n    {status === Status.LOADING && (ComponentOnLoading || <span>Загрузка</span>)}\n    {status === Status.ERROR && ComponentOnError}\n  </>\n);\n","const host = 'https://rickandmortyapi.com/api';\n\nexport const api = {\n  getCharacter: (): string => `${host}/character`,\n};\n","/* eslint-disable no-param-reassign */\nimport axios from 'axios';\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { api } from '../../app/api';\nimport { StateType } from '../../app/store';\nimport { Status } from '../hoc/SwitchStatus';\n\ntype CharacterType = {\n  id: number,\n  name: string,\n  status: string,\n  species: string,\n  image: string\n}\n\ntype InitialStateType = {\n  table: Array<CharacterType>,\n  status: Status\n}\n\nconst initialState: InitialStateType = {\n  table: [],\n  status: Status.NO_STATUS,\n};\n\nexport const getCharacter = createAsyncThunk('getCharacter', async (filter?: string) => {\n  const response = await axios.get(api.getCharacter(), {\n    params: {\n      name: filter || '',\n    },\n  });\n  return response.data;\n});\n\nexport const mainPageSlice = createSlice({\n  name: 'mainPageSlice',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(getCharacter.pending, (state) => {\n      state.status = Status.LOADING;\n    });\n    builder.addCase(getCharacter.fulfilled, (state, action) => {\n      state.table = action.payload.results;\n      state.status = Status.DONE;\n    });\n    builder.addCase(getCharacter.rejected, (state) => {\n      state.status = Status.ERROR;\n    });\n  },\n});\n\nexport const selectMainPage = (state: StateType): InitialStateType => state.mainPage;\n\nexport default mainPageSlice.reducer;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { cn } from '../../utils/bem-config';\nimport { SwitchStatus } from '../hoc/SwitchStatus';\nimport { getCharacter, selectMainPage } from './MainPageSlice';\nimport './MainPage.scss';\n\nconst bem = cn('main-page');\n\nexport const MainPage: React.FC = () => {\n  const dispatch = useDispatch();\n  const mainPage = useSelector(selectMainPage);\n  let idTimeOut: number;\n\n  useEffect(() => {\n    dispatch(getCharacter());\n  }, [dispatch]);\n\n  return (\n    <div className={bem()}>\n      <input\n        className={bem('field')}\n        type=\"text\"\n        onChange={(event) => {\n          const { value } = event.target;\n          if (value.length >= 2 || value.length === 0) {\n            if (idTimeOut) clearTimeout(idTimeOut);\n            idTimeOut = setTimeout(() => {\n              dispatch(getCharacter(value));\n            }, 500) as unknown as number;\n          }\n        }}\n      />\n      <SwitchStatus\n        status={mainPage.status}\n        ComponentOnDone={(\n          <div className={bem('table-container')}>\n            {mainPage.table.map((item) => (\n              <div className={bem('table-item')} key={item.id}>\n                <div className={bem('image')}>\n                  <img src={item.image} alt=\"\" />\n                </div>\n                <div className={bem('hidden-block')}>\n                  <div className={bem('info')}>{`Name: ${item.name}`}</div>\n                  <div className={bem('info')}>{`Status: ${item.status}`}</div>\n                  <div className={bem('info')}>{`Species: ${item.species}`}</div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.css';\nimport { MainPage } from './components/MainPage';\n\nconst App: React.FC = () => (\n  <MainPage />\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\nimport mainPageSlice from '../components/MainPage/MainPageSlice';\n\nconst store = configureStore({\n  reducer: {\n    mainPage: mainPageSlice,\n  },\n});\n\nexport type StateType = ReturnType<typeof store.getState>\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './app/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}